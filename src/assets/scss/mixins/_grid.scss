// Generate semantic grid columns with these mixins.
@mixin make-container() {
  margin-right: auto;
  margin-left: auto;
  padding-right: ($grid-gutter-width / 2);
  padding-left: ($grid-gutter-width / 2);
  width: 100%;
}

// For each breakpoint, define the max width of the container in a media query.
@mixin make-container-max-widths(
  $max-widths: $container-max-widths,
  $breakpoints: $grid-breakpoints
) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-row() {
  display: flex;
  flex-wrap: wrap;
  margin: 0 ($grid-gutter-width / -2);
}

@mixin make-col-ready() {
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  padding: ($grid-gutter-width / 2);
  width: 100%;
  min-height: rem(1px); // Prevent collapsing
}

@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: $size / $columns;
  margin-left: if($num == 0, 0, percentage($num));
}

// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-grid-columns(
  $columns: $grid-columns,
  $gutter: $grid-gutter-width,
  $breakpoints: $grid-breakpoints
) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    padding: 0 ($gutter / 2);
    width: 100%;
    min-height: rem(1px); // Prevent columns from collapsing when empty
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $columns {
      .grid-col#{$infix}-#{$i} {
        @extend %grid-column;
      }
    }

    @if ($infix == "-") {
      .grid-col {
        @extend %grid-column;
      }
    } @else {
      .grid-col#{$infix} {
        @extend %grid-column;
      }
    }

    .grid-col#{$infix}-auto {
      @extend %grid-column;
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.grid-col--{bp}` classes for equal-width flexbox columns
      @if ($infix == "-") {
        .grid-col {
          display: flex;
          flex-basis: 0;
          flex-grow: 1;
          max-width: 100%;
        }
      } @else {
        .grid-col#{$infix} {
          flex-basis: 0;
          flex-grow: 1;
          max-width: 100%;
        }
      }

      .grid-col#{$infix}-auto {
        flex: 0 0 auto;
        width: auto;
        max-width: none; // Reset earlier grid tiers
      }

      @for $i from 1 through $columns {
        .grid-col#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }
      }

      @for $i from 0 through $columns {
        .grid-col#{$infix}-order-#{$i} {
          order: $i;
        }
      }

      // `$columns - 1`
      // because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
          .grid-col#{$infix}-offset-#{$i} {
            @include make-col-offset($i, $columns);
          }
        }
      }
    }
  }
}
